import 'dotenv/config';
import { Telegraf, Markup } from 'telegraf';
import { DateTime } from 'luxon';
import fs from 'fs';

// === –ö–æ–Ω—Ñ–∏–≥ —Ç–µ–∫—Å—Ç–∞ ===
// –§—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–∏. –ú–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É.
function plural(n, one, few, many) {
  const n10 = n % 10, n100 = n % 100;
  if (n10 === 1 && n100 !== 11) return one;
  if (n10 >= 2 && n10 <= 4 && (n100 < 12 || n100 > 14)) return few;
  return many;
}
function mainLine(days) {
  const word = plural(days, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π');
  return `–î–æ –≤–æ–∑–º–æ–∂–Ω–æ–π –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ –æ—Å—Ç–∞–ª–æ—Å—å ${days} ${word}, –∞ –º–æ–∂–µ—Ç –∏ –Ω–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–π, –ø–æ—Å–º–æ—Ç—Ä–∏–º.`;
}

// –°–ø–∏—Å–æ–∫ –¥–æ–ø. —Ñ—Ä–∞–∑. –ü–∏—à–∏ —Å–≤–æ–∏ 10 —à—Ç—É–∫ ‚Äî –±—É–¥—É—Ç –∫—Ä—É—Ç–∏—Ç—å—Å—è –ø–æ –¥–Ω—è–º.
const EXTRA_LINES = [
  '–ï—Å–ª–∏ –î–µ–Ω–∏—Å–∞ –æ—Ç–ø—É—Å—Ç—è—Ç –∫ –Ω–∞–º',
  '–ï—Å–ª–∏ –ò–ª—è —Ä–µ—à–∏—Ç—Å—è –≤–∑—è—Ç—å —Å–≤–æ—é –±—Ä–∏—á–∫—É –∏ –¥–æ–µ—Ö–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –†–∞—Å–∏–º–æ–º',
  // –¥–æ–±–∞–≤–ª—è–π –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∏–∂–µ
  '–ï—Å–ª–∏ –≤—Å–µ —Å–æ–±–µ—Ä—É—Ç—Å—è –±–µ–∑ –æ–ø–æ–∑–¥–∞–Ω–∏–π',
  '–ï—Å–ª–∏ –ø–æ–≥–æ–¥–∞ —Å–∫–∞–∂–µ—Ç: ‚Äú–¥–∞‚Äù',
  '–ï—Å–ª–∏ –≤—Å—ë —Å–æ–≤–ø–∞–¥—ë—Ç –∫–∞–∫ –Ω–∞–¥–æ',
  '–ï—Å–ª–∏ —Ç–∞–∫—Å–∏—Å—Ç –Ω–∞–π–¥—ë—Ç –Ω—É–∂–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç',
  '–ï—Å–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –∑–∞–π–¥—ë—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞',
  '–ï—Å–ª–∏ –∫–æ—Ñ–µ –±—É–¥–µ—Ç –∫—Ä–µ–ø–∫–∏–º',
  '–ï—Å–ª–∏ —à—É—Ç–∫–∏ –±—É–¥—É—Ç —Å–º–µ—à–Ω—ã–º–∏',
  '–ï—Å–ª–∏ —É–¥–∞—á–∞ –±—É–¥–µ—Ç –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ'
];

// === –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ —Ñ–∞–π–ª–µ (–ø–µ—Ä–µ—á–∞—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏) ===
const STORE_PATH = process.env.STORE_PATH || './store.json';
function loadStore() {
  try { return JSON.parse(fs.readFileSync(STORE_PATH, 'utf8')); }
  catch { return {}; }
}
function saveStore(obj) {
  fs.writeFileSync(STORE_PATH, JSON.stringify(obj, null, 2));
}
let store = loadStore();
// –°—Ç—Ä—É–∫—Ç—É—Ä–∞: store[chatId] = { target_date: 'YYYY-MM-DD' | null, tz_offset: '+04:00', notify: false, last_notified_iso: 'YYYY-MM-DD' | null }

function ensureChat(chatId) {
  if (!store[chatId]) {
    store[chatId] = { target_date: null, tz_offset: '+00:00', notify: false, last_notified_iso: null };
    saveStore(store);
  }
}

// === –£—Ç–∏–ª–∏—Ç—ã –¥–∞—Ç ===
function parseDate(input) {
  let dt = DateTime.fromFormat(String(input).trim(), 'yyyy-MM-dd', { zone: 'utc' });
  if (!dt.isValid) dt = DateTime.fromFormat(String(input).trim(), 'dd.MM.yyyy', { zone: 'utc' });
  return dt.isValid ? dt : null;
}
function normalizeTzOffset(s) {
  const m = String(s || '').trim().match(/^([+\-])(\d{2}):(\d{2})$/);
  if (!m) return null;
  return `${m[1]}${m[2]}:${m[3]}`;
}
function calcDaysLeft(targetISO, tzOffset) {
  const zone = `UTC${tzOffset}`;
  const now = DateTime.now().setZone(zone).startOf('day');
  const target = DateTime.fromISO(targetISO, { zone }).startOf('day');
  return Math.floor(target.diff(now, 'days').days);
}
function todayISO(tzOffset) {
  const zone = `UTC${tzOffset}`;
  return DateTime.now().setZone(zone).startOf('day').toISODate();
}
function dailyExtraLine(tzOffset) {
  const zone = `UTC${tzOffset}`;
  const dayIndex = DateTime.now().setZone(zone).ordinal % EXTRA_LINES.length;
  return EXTRA_LINES[dayIndex];
}

// === –ë–æ—Ç ===
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é (inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
function menuKeyboard(chatId) {
  const cfg = store[chatId] || {};
  const notifyLabel = cfg.notify ? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å 08:00' : 'üîî –í–∫–ª—é—á–∏—Ç—å 08:00';
  return Markup.inlineKeyboard([
    [Markup.button.callback('‚è≥ –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å', 'ACTION_LEFT')],
    [Markup.button.callback('üìÖ –ö–∞–∫–∞—è –¥–∞—Ç–∞', 'ACTION_WHEN')],
    [Markup.button.callback(notifyLabel, 'ACTION_TOGGLE_NOTIFY')],
    [Markup.button.callback('üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å', 'ACTION_TZ_HELP')],
    [Markup.button.callback('üßº –°–±—Ä–æ—Å–∏—Ç—å –¥–∞—Ç—É', 'ACTION_CLEAR')]
  ]);
}

// /start
bot.start(async (ctx) => {
  const chatId = String(ctx.chat.id);
  ensureChat(chatId);

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å—Ç–∞–≤–∏–º +04:00 (–¢–±–∏–ª–∏—Å–∏), –µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω
  if (store[chatId].tz_offset === '+00:00') {
    store[chatId].tz_offset = '+04:00';
    saveStore(store);
  }

  await ctx.reply(
`–ü—Ä–∏–≤–µ—Ç! –Ø —Å—á–∏—Ç–∞—é, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.

–ö–æ–º–∞–Ω–¥—ã:
/setdate 2025-09-10  ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É (–∏–ª–∏ 10.09.2025)
/tz +04:00           ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
/left                ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å
/when                ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É
/notify              ‚Äî –≤–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 08:00
/clear               ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞—Ç—É
/menu                ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é-–∫–Ω–æ–ø–∫–∏`,
    menuKeyboard(chatId)
  );
});

// /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏
bot.command('menu', (ctx) => {
  const chatId = String(ctx.chat.id);
  ensureChat(chatId);
  return ctx.reply('–ú–µ–Ω—é:', menuKeyboard(chatId));
});

// /setdate
bot.command('setdate', (ctx) => {
  const chatId = String(ctx.chat.id);
  ensureChat(chatId);

  const arg = ctx.message.text.replace(/^\/setdate(@\w+)?\s*/i, '').trim();
  if (!arg) return ctx.reply('–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É: /setdate 2025-09-10 –∏–ª–∏ /setdate 10.09.2025');

  const dt = parseDate(arg);
  if (!dt) return ctx.reply('–î–∞—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è. –ü—Ä–∏–º–µ—Ä: 2025-09-10');

  store[chatId].target_date = dt.toFormat('yyyy-LL-dd');
  saveStore(store);

  const days = calcDaysLeft(store[chatId].target_date, store[chatId].tz_offset);
  const text = `${mainLine(days)}\n${dailyExtraLine(store[chatId].tz_offset)}`;
  ctx.reply(`–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${dt.toFormat('dd.LL.yyyy')}\n\n${text}`, menuKeyboard(chatId));
});

// /tz
bot.command('tz', (ctx) => {
  const chatId = String(ctx.chat.id);
  ensureChat(chatId);

  const arg = ctx.message.text.replace(/^\/tz(@\w+)?\s*/i, '').trim();
  const norm = normalizeTzOffset(arg);
  if (!norm) return ctx.reply('–§–æ—Ä–º–∞—Ç: /tz +04:00 (–∏–ª–∏ -03:00 –∏ —Ç.–¥.)');

  store[chatId].tz_offset = norm;
  saveStore(store);
  ctx.reply(`–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${norm}`, menuKeyboard(chatId));
});

// /left
bot.command('left', (ctx) => {
  const chatId = String(ctx.chat.id);
  ensureChat(chatId);

  const cfg = store[chatId];
  if (!cfg.target_date) return ctx.reply('–î–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞: /setdate 2025-09-10');

  const days = calcDaysLeft(cfg.target_date, cfg.tz_offset);
  const text = `${mainLine(days)}\n${dailyExtraLine(cfg.tz_offset)}`;
  ctx.reply(text, menuKeyboard(chatId));
});

// /when
bot.command('when', (ctx) => {
  const chatId = String(ctx.chat.id);
  ensureChat(chatId);

  const cfg = store[chatId];
  if (!cfg.target_date) return ctx.reply('–î–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. /setdate 2025-09-10');
  const zone = `UTC${cfg.tz_offset}`;
  const target = DateTime.fromISO(cfg.target_date, { zone });
  ctx.reply(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: ${target.toFormat('dd.LL.yyyy')} (${cfg.tz_offset})`, menuKeyboard(chatId));
});

// /notify ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è 08:00
bot.command('notify', (ctx) => {
  const chatId = String(ctx.chat.id);
  ensureChat(chatId);
  store[chatId].notify = !store[chatId].notify;
  saveStore(store);
  ctx.reply(store[chatId].notify ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 08:00: –í–ö–õ.' : '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 08:00: –í–´–ö–õ.', menuKeyboard(chatId));
});

// /clear
bot.command('clear', (ctx) => {
  const chatId = String(ctx.chat.id);
  ensureChat(chatId);
  store[chatId].target_date = null;
  saveStore(store);
  ctx.reply('–î–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞.', menuKeyboard(chatId));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
bot.action('ACTION_LEFT', async (ctx) => {
  const chatId = String(ctx.chat.id);
  ensureChat(chatId);
  const cfg = store[chatId];
  if (!cfg.target_date) return ctx.answerCbQuery('–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏ –¥–∞—Ç—É: /setdate');
  const days = calcDaysLeft(cfg.target_date, cfg.tz_offset);
  const text = `${mainLine(days)}\n${dailyExtraLine(cfg.tz_offset)}`;
  await ctx.editMessageText(text, menuKeyboard(chatId));
});
bot.action('ACTION_WHEN', async (ctx) => {
  const chatId = String(ctx.chat.id);
  ensureChat(chatId);
  const cfg = store[chatId];
  if (!cfg.target_date) return ctx.answerCbQuery('–î–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
  const zone = `UTC${cfg.tz_offset}`;
  const target = DateTime.fromISO(cfg.target_date, { zone });
  await ctx.editMessageText(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: ${target.toFormat('dd.LL.yyyy')} (${cfg.tz_offset})`, menuKeyboard(chatId));
});
bot.action('ACTION_TOGGLE_NOTIFY', async (ctx) => {
  const chatId = String(ctx.chat.id);
  ensureChat(chatId);
  store[chatId].notify = !store[chatId].notify;
  saveStore(store);
  await ctx.editMessageText(store[chatId].notify ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 08:00: –í–ö–õ.' : '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 08:00: –í–´–ö–õ.', menuKeyboard(chatId));
});
bot.action('ACTION_TZ_HELP', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('–£—Å—Ç–∞–Ω–æ–≤–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–æ–º–∞–Ω–¥–æ–π, –ø—Ä–∏–º–µ—Ä: /tz +04:00');
});
bot.action('ACTION_CLEAR', async (ctx) => {
  const chatId = String(ctx.chat.id);
  ensureChat(chatId);
  store[chatId].target_date = null;
  saveStore(store);
  await ctx.editMessageText('–î–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞.', menuKeyboard(chatId));
});

// === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ 08:00 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ ===
// –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ —É —á–∞—Ç–∞ notify=on –∏ —Å–µ–π—á–∞—Å 08:00 –≤ –µ–≥–æ –ø–æ—è—Å–µ ‚Äî —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å.
setInterval(async () => {
  for (const chatId of Object.keys(store)) {
    const cfg = store[chatId];
    if (!cfg?.notify || !cfg?.target_date) continue;

    const zone = `UTC${cfg.tz_offset}`;
    const now = DateTime.now().setZone(zone);
    const isEight = now.hour === 8 && now.minute === 0;
    const today = now.startOf('day').toISODate();

    if (isEight && cfg.last_notified_iso !== today) {
      try {
        const days = calcDaysLeft(cfg.target_date, cfg.tz_offset);
        const text = `${mainLine(days)}\n${dailyExtraLine(cfg.tz_offset)}`;
        await bot.telegram.sendMessage(chatId, text);
        cfg.last_notified_iso = today;
        saveStore(store);
      } catch (e) {
        // –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º, —á—Ç–æ–±—ã —Ü–∏–∫–ª –Ω–µ –ø–∞–¥–∞–ª
      }
    }
  }
}, 60 * 1000); // —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–º–µ–Ω—é + –∞–≤—Ç–æ-08:00)'));
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
